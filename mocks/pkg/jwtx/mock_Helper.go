// Code generated by mockery v2.46.3. DO NOT EDIT.

package jwtx

import (
	jwtx "github.com/stnss/dealls-interview/pkg/jwtx"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockHelper is an autogenerated mock type for the Helper type
type MockHelper struct {
	mock.Mock
}

type MockHelper_Expecter struct {
	mock *mock.Mock
}

func (_m *MockHelper) EXPECT() *MockHelper_Expecter {
	return &MockHelper_Expecter{mock: &_m.Mock}
}

// ClaimJWT provides a mock function with given fields: accessToken, secret
func (_m *MockHelper) ClaimJWT(accessToken string, secret string) (*jwtx.Claims, error) {
	ret := _m.Called(accessToken, secret)

	if len(ret) == 0 {
		panic("no return value specified for ClaimJWT")
	}

	var r0 *jwtx.Claims
	var r1 error
	if rf, ok := ret.Get(0).(func(string, string) (*jwtx.Claims, error)); ok {
		return rf(accessToken, secret)
	}
	if rf, ok := ret.Get(0).(func(string, string) *jwtx.Claims); ok {
		r0 = rf(accessToken, secret)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwtx.Claims)
		}
	}

	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(accessToken, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockHelper_ClaimJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClaimJWT'
type MockHelper_ClaimJWT_Call struct {
	*mock.Call
}

// ClaimJWT is a helper method to define mock.On call
//   - accessToken string
//   - secret string
func (_e *MockHelper_Expecter) ClaimJWT(accessToken interface{}, secret interface{}) *MockHelper_ClaimJWT_Call {
	return &MockHelper_ClaimJWT_Call{Call: _e.mock.On("ClaimJWT", accessToken, secret)}
}

func (_c *MockHelper_ClaimJWT_Call) Run(run func(accessToken string, secret string)) *MockHelper_ClaimJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(string))
	})
	return _c
}

func (_c *MockHelper_ClaimJWT_Call) Return(_a0 *jwtx.Claims, _a1 error) *MockHelper_ClaimJWT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHelper_ClaimJWT_Call) RunAndReturn(run func(string, string) (*jwtx.Claims, error)) *MockHelper_ClaimJWT_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateJWT provides a mock function with given fields: data, secret, expiration
func (_m *MockHelper) GenerateJWT(data jwtx.UserClaim, secret string, expiration time.Duration) (string, time.Time) {
	ret := _m.Called(data, secret, expiration)

	if len(ret) == 0 {
		panic("no return value specified for GenerateJWT")
	}

	var r0 string
	var r1 time.Time
	if rf, ok := ret.Get(0).(func(jwtx.UserClaim, string, time.Duration) (string, time.Time)); ok {
		return rf(data, secret, expiration)
	}
	if rf, ok := ret.Get(0).(func(jwtx.UserClaim, string, time.Duration) string); ok {
		r0 = rf(data, secret, expiration)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(jwtx.UserClaim, string, time.Duration) time.Time); ok {
		r1 = rf(data, secret, expiration)
	} else {
		r1 = ret.Get(1).(time.Time)
	}

	return r0, r1
}

// MockHelper_GenerateJWT_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateJWT'
type MockHelper_GenerateJWT_Call struct {
	*mock.Call
}

// GenerateJWT is a helper method to define mock.On call
//   - data jwtx.UserClaim
//   - secret string
//   - expiration time.Duration
func (_e *MockHelper_Expecter) GenerateJWT(data interface{}, secret interface{}, expiration interface{}) *MockHelper_GenerateJWT_Call {
	return &MockHelper_GenerateJWT_Call{Call: _e.mock.On("GenerateJWT", data, secret, expiration)}
}

func (_c *MockHelper_GenerateJWT_Call) Run(run func(data jwtx.UserClaim, secret string, expiration time.Duration)) *MockHelper_GenerateJWT_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(jwtx.UserClaim), args[1].(string), args[2].(time.Duration))
	})
	return _c
}

func (_c *MockHelper_GenerateJWT_Call) Return(_a0 string, _a1 time.Time) *MockHelper_GenerateJWT_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockHelper_GenerateJWT_Call) RunAndReturn(run func(jwtx.UserClaim, string, time.Duration) (string, time.Time)) *MockHelper_GenerateJWT_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockHelper creates a new instance of MockHelper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHelper(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHelper {
	mock := &MockHelper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
