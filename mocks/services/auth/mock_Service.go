// Code generated by mockery v2.46.3. DO NOT EDIT.

package auth

import (
	context "context"

	presentation "github.com/stnss/dealls-interview/internal/presentation"
	mock "github.com/stretchr/testify/mock"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

type MockService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockService) EXPECT() *MockService_Expecter {
	return &MockService_Expecter{mock: &_m.Mock}
}

// Login provides a mock function with given fields: ctx, param
func (_m *MockService) Login(ctx context.Context, param *presentation.LoginRequest) (*presentation.LoginResponse, error) {
	ret := _m.Called(ctx, param)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *presentation.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *presentation.LoginRequest) (*presentation.LoginResponse, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *presentation.LoginRequest) *presentation.LoginResponse); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*presentation.LoginResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *presentation.LoginRequest) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type MockService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - param *presentation.LoginRequest
func (_e *MockService_Expecter) Login(ctx interface{}, param interface{}) *MockService_Login_Call {
	return &MockService_Login_Call{Call: _e.mock.On("Login", ctx, param)}
}

func (_c *MockService_Login_Call) Run(run func(ctx context.Context, param *presentation.LoginRequest)) *MockService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*presentation.LoginRequest))
	})
	return _c
}

func (_c *MockService_Login_Call) Return(_a0 *presentation.LoginResponse, _a1 error) *MockService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockService_Login_Call) RunAndReturn(run func(context.Context, *presentation.LoginRequest) (*presentation.LoginResponse, error)) *MockService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Registration provides a mock function with given fields: ctx, param
func (_m *MockService) Registration(ctx context.Context, param *presentation.RegistrationRequest) error {
	ret := _m.Called(ctx, param)

	if len(ret) == 0 {
		panic("no return value specified for Registration")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *presentation.RegistrationRequest) error); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockService_Registration_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Registration'
type MockService_Registration_Call struct {
	*mock.Call
}

// Registration is a helper method to define mock.On call
//   - ctx context.Context
//   - param *presentation.RegistrationRequest
func (_e *MockService_Expecter) Registration(ctx interface{}, param interface{}) *MockService_Registration_Call {
	return &MockService_Registration_Call{Call: _e.mock.On("Registration", ctx, param)}
}

func (_c *MockService_Registration_Call) Run(run func(ctx context.Context, param *presentation.RegistrationRequest)) *MockService_Registration_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*presentation.RegistrationRequest))
	})
	return _c
}

func (_c *MockService_Registration_Call) Return(_a0 error) *MockService_Registration_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockService_Registration_Call) RunAndReturn(run func(context.Context, *presentation.RegistrationRequest) error) *MockService_Registration_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
